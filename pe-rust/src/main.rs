// Problem 1: Multiples of 3 and 5
//   If we list all the natural numbers below 10 that are multiples of 
//   3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//   Find the sum of all the multiples of 3 or 5 below 1000.
#[test]
fn test_pe1() { assert!(exec_pe1()==233168) }
fn exec_pe1() -> int { calc_pe1(1000) }
fn calc_pe1(limit : int) -> int {
    let mut sum = 0;
    for number in range(1i, limit) {
        if number % 3 == 0 || number % 5 == 0 { 
            sum += number 
        }
    }
    sum
}

// Problem 2: Even Fibonacci numbers
//   Each new term in the Fibonacci sequence is generated by adding the
//   previous two terms. By starting with 1 and 2, the first 10 terms will be:
//     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//   By considering the terms in the Fibonacci sequence whose values do not
//   exceed four million, find the sum of the even-valued terms.
#[test]
fn test_pe2() { assert!(exec_pe2()==4613732) }
fn exec_pe2() -> int { calc_pe2(4 * 1000 * 1000) }
fn calc_pe2( limit : int ) -> int {
    let mut prev = 1i;
    let mut curr = 1;
    let mut sum = 0;
    while curr < limit {
        if curr % 2 == 0 {
            sum += curr;
        }
        let next = prev + curr;
        prev = curr;
        curr = next;
    }
    sum
}

#[cfg(not(test))]
fn main() {
    println!("exec_pe1()={}", exec_pe1());
    println!("exec_pe2()={}", exec_pe2());
}
